/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bio_graphics;

import java.awt.BasicStroke;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import static java.lang.Math.sqrt;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Wobbaf
 */
public class Bio_Graphics extends javax.swing.JFrame {

    String path = null;
    int br = 255;
    double ch = 1.0;
    int tr = 127;
    double gm = 0.25;
    List<Point> cores = new ArrayList<Point>();

    /**
     * Creates new form NewJFrame
     */
    public Bio_Graphics() throws IOException {

        initComponents();
        int maxDataPoints = 256;
        int maxScore = 255;
        for (int i = 0; i < maxDataPoints; i++) {
            //scores.add(new Point(i, i));
            //scores.add((int) (255 * (Math.pow((double) (i+1) / (double) 255, ngamma))));
        }
        graph mainPanel = new graph(cores);
        JFrame frame = new JFrame("graph");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(mainPanel);
        frame.pack();
        frame.setLocationByPlatform(true);
        //frame.setVisible(true);
        jPanel1.add(mainPanel);

        BufferedImage myPicture = null;

        if (path != null) {
            myPicture = loadImg(path);
        }

        JLabel lele = null;
        if (myPicture != null) {
            lele = new JLabel((Icon) new ImageIcon(myPicture).getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT));
        }
        if (lele != null) {
            jPanel2.add(lele);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jFileChooser2 = new javax.swing.JFileChooser();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jToolBar1 = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jSlider2 = new javax.swing.JSlider();
        jSlider3 = new javax.swing.JSlider();
        jTextField1 = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setVisible(true);

        jToolBar1.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 513, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 565, Short.MAX_VALUE)
        );

        jToolBar1.add(jPanel1);

        jButton1.setText("hipass");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("gauss");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("lopass");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("sobel");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("threshold");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton6.setText("chooser");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Invert");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Adjust brightness");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Adjust contrast");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Gamma correct.");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jSlider1.setMaximum(510);
        jSlider1.setValue(255);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jSlider2.setMaximum(1000);
        jSlider2.setMinimum(100);
        jSlider2.setValue(500);
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jSlider3.setMaximum(255);
        jSlider3.setValue(127);
        jSlider3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider3StateChanged(evt);
            }
        });

        jTextField1.setText("1.00");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton11.setText("OK");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Emboss");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jButton9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jButton10)
                                        .addGap(42, 42, 42)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton4)
                                    .addComponent(jButton1)
                                    .addComponent(jButton5)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jButton3)
                                        .addGap(32, 32, 32)
                                        .addComponent(jButton12))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jButton2)
                                        .addGap(18, 18, 18)
                                        .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton7)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jButton8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 10, Short.MAX_VALUE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jButton6)))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3))
                    .addComponent(jButton12))
                .addGap(31, 31, 31)
                .addComponent(jButton6)
                .addGap(33, 33, 33)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton8)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9)
                    .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(jButton11)
                .addContainerGap())
        );

        jToolBar1.add(jPanel4);

        jTabbedPane1.addTab("editor", jToolBar1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 69, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 39, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 874, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                .addGap(31, 31, 31)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("org", jPanel2);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("edited", jPanel3);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        highPassFilter(myPicture, 1);
    }                                        

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPEG file", "jpg", "jpeg");
        fileChooser.setFileFilter(filter);
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            path = selectedFile.getAbsolutePath();
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            try {
                if (path != null) {
                    myPicture = loadImg(path);
                }
            } catch (IOException ex) {
                Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }                                        

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        highPassFilter(myPicture, 2);
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        highPassFilter(myPicture, 3);
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        highPassFilter(myPicture, 5);
    }                                        

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        Invert(myPicture);
    }                                        

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        Brightness(myPicture, br);
    }                                        

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {                                      
        // TODO add your handling code here:
        br = this.jSlider1.getValue();
    }                                     

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {                                      
        // TODO add your handling code here:
        ch = this.jSlider2.getValue() / 100;
    }                                     

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        Contrast(myPicture, ch);
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        Threshold(myPicture, tr);
    }                                        

    private void jSlider3StateChanged(javax.swing.event.ChangeEvent evt) {                                      
        // TODO add your handling code here:
        tr = this.jSlider3.getValue();
    }                                     

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        gm = Double.parseDouble(jTextField1.getText());
        Gamma(myPicture, gm);
    }                                         

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        gm = Double.parseDouble(jTextField1.getText());
    }                                           

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        int maxDataPoints = 256;
        int maxScore = 255;
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        OK(myPicture);
        graph mainPanel = new graph(cores);
        JFrame frame = new JFrame("graph");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(mainPanel);
        frame.pack();
        frame.setLocationByPlatform(true);
        //frame.setVisible(true);
        jPanel1.add(mainPanel);
    }                                         

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        BufferedImage myPicture = null;
        try {
            if (path != null) {
                myPicture = loadImg(path);
            }
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        highPassFilter(myPicture,6);
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bio_Graphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bio_Graphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bio_Graphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bio_Graphics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    new Bio_Graphics().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

        //canvas1 = loadImg("castle.jpg");
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration                   

    private static int getR(int in) {
        return (int) ((in << 8) >> 24) & 0xff;
    }

    private static int getG(int in) {
        return (int) ((in << 16) >> 24) & 0xff;
    }

    private static int getB(int in) {
        return (int) ((in << 24) >> 24) & 0xff;
    }

    private static int toRGB(int r, int g, int b) {
        return (int) ((((r << 8) | g) << 8) | b);
    }

    public void saveImg(BufferedImage out) throws IOException {
        System.out.println("Saving image...");
        Image out2 = out.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(),
                Image.SCALE_SMOOTH);
        jLabel2.setIcon(new ImageIcon(out2));
        ImageIO.write(out, "jpeg", new File("out.jpg"));
    }

    public BufferedImage loadImg(String fileName) throws IOException {
        System.out.println("Loading image...");
        File file = new File(fileName);
        BufferedImage img = ImageIO.read(file);
        Image out2 = img.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(),
                Image.SCALE_SMOOTH);
        jLabel1.setIcon(new ImageIcon(out2));
        return img;
    }

    public void Invert(BufferedImage img) {
        BufferedImage img1 = deepCopy(img);
        cores.clear();
        int maxDataPoints = 256;
        int maxScore = 255;
        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                int pixel = img.getRGB(x, y);
                int R = getR(pixel);
                int G = getG(pixel);
                int B = getB(pixel);
                int r, g, b;
                r = 255 - R;
                g = 255 - G;
                b = 255 - B;
                img1.setRGB(x, y, toRGB(r, g, b));
            }
        }
        try {
            saveImg(img1);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static int thresh(int pix, int threshold) {
        if (pix > threshold) {
            return toRGB(255, 255, 255);
        } else {
            return toRGB(0, 0, 0);
        }
    }

    public void Brightness(BufferedImage img, int bright) {
        BufferedImage img1 = deepCopy(img);
        bright = 255 - br;

        int maxDataPoints = 256;
        int maxScore = 255;

        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                int pixel = img.getRGB(x, y);
                int R = getR(pixel);
                int G = getG(pixel);
                int B = getB(pixel);
                int r, g, b;
                r = R + bright;
                if (r > 255) {
                    r = 255;
                }
                if (r < 0) {
                    r = 0;
                }
                g = G + bright;
                if (g > 255) {
                    g = 255;
                }
                if (g < 0) {
                    g = 0;
                }
                b = B + bright;
                if (b > 255) {
                    b = 255;
                }
                if (b < 0) {
                    b = 0;
                }
                img1.setRGB(x, y, toRGB(r, g, b));
            }
        }
        try {
            saveImg(img1);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void Contrast(BufferedImage img, double cont) {
        BufferedImage img1 = deepCopy(img);
        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                int pixel = img.getRGB(x, y);
                int R = getR(pixel);
                int G = getG(pixel);
                int B = getB(pixel);
                int r, g, b;
                r = (int) cont * (R - 127) + 127;
                if (r > 255) {
                    r = 255;
                }
                if (r < 0) {
                    r = 0;
                }
                g = (int) cont * (G - 127) + 127;
                if (g > 255) {
                    g = 255;
                }
                if (g < 0) {
                    g = 0;
                }
                b = (int) cont * (B - 127) + 127;
                if (b > 255) {
                    b = 255;
                }
                if (b < 0) {
                    b = 0;
                }
                img1.setRGB(x, y, toRGB(r, g, b));
            }
        }
        try {
            saveImg(img1);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void Gamma(BufferedImage img, double gamma) {
        double ngamma = 1 / gamma;
        BufferedImage img1 = deepCopy(img);
        int maxDataPoints = 256;
        int maxScore = 255;

        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                int pixel = img.getRGB(x, y);
                int R = getR(pixel);
                int G = getG(pixel);
                int B = getB(pixel);
                int r, g, b;
                r = (int) (255 * (Math.pow((double) R / (double) 255, ngamma)));
                if (r > 255) {
                    r = 255;
                }
                if (r < 0) {
                    r = 0;
                }
                g = (int) (255 * (Math.pow((double) G / (double) 255, ngamma)));
                if (g > 255) {
                    g = 255;
                }
                if (g < 0) {
                    g = 0;
                }
                b = (int) (255 * (Math.pow((double) B / (double) 255, ngamma)));
                if (b > 255) {
                    b = 255;
                }
                if (b < 0) {
                    b = 0;
                }
                img1.setRGB(x, y, toRGB(r, g, b));
            }
        }
        try {
            saveImg(img1);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void OK(BufferedImage img) {
        BufferedImage img1 = deepCopy(img);
        int maxDataPoints = 256;
        int maxScore = 255;
        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                int pixel = img.getRGB(x, y);
                int R = getR(pixel);
                int G = getG(pixel);
                int B = getB(pixel);
                int ixr = 0;
                int ixg = 0;
                int ixb = 0;
                int r, g, b;
                //y=(((yB-yA)(x-xA))/(xB-xA))+yA 
                for (int i = 0; i <= cores.size()-1; i++){
                    if (R > cores.get(i).getX()/2 && R < cores.get(i+1).getX()/2)
                        ixr = i;
                }
                r =(int) ((((cores.get(ixr+1).getY()/2-cores.get(ixr).getY()/2)*(R - cores.get(ixr).getX()/2))/(cores.get(ixr+1).getX()/2-cores.get(ixr).getX()/2))+(cores.get(ixr).getY()/2));
                if (r > 255) {
                    r = 255;
                }
                if (r < 0) {
                    r = 0;
                }
                for (int i = 0; i < cores.size()-1; i++){
                    if (G > cores.get(i).getX()/2 && G < cores.get(i+1).getX()/2)
                        ixg = i;
                }
                g = (int) ((((cores.get(ixg+1).getY()/2-cores.get(ixg).getY()/2)*(G - cores.get(ixg).getX()/2))/(cores.get(ixg+1).getX()/2-cores.get(ixg).getX()/2))+(cores.get(ixg).getY()/2));;
                if (g > 255) {
                    g = 255;
                }
                if (g < 0) {
                    g = 0;
                }
                for (int i = 0; i < cores.size()-1; i++){
                    if (B > cores.get(i).getX()/2 && B < cores.get(i+1).getX()/2)
                        ixb = i;
                }
                b = (int) ((((cores.get(ixb+1).getY()/2-cores.get(ixb).getY()/2)*(B - cores.get(ixb).getX()/2))/(cores.get(ixb+1).getX()/2-cores.get(ixb).getX()/2))+(cores.get(ixb).getY()/2));;
                if (b > 255) {
                    b = 255;
                }
                if (b < 0) {
                    b = 0;
                }
                img1.setRGB(x, y, toRGB(255-r, 255-g, 255-b));
            }
        }
        try {
            saveImg(img1);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void Normalisation(BufferedImage img) {
        int minpix = 255;
        int maxpix = 0;
        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                int pixel = img.getRGB(x, y);
                int R = getR(pixel);
                int G = getG(pixel);
                int B = getB(pixel);
                int mean = (R + G + B) / 3;
                if (mean < minpix) {
                    minpix = mean;
                }
                if (mean > maxpix) {
                    maxpix = mean;
                }
            }
        }
        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                int pixel = img.getRGB(x, y);
                int R = getR(pixel);
                int G = getG(pixel);
                int B = getB(pixel);
                int Rr = ((R - minpix) * (255 / (maxpix - minpix)));
                int Gg = ((G - minpix) * (255 / (maxpix - minpix)));
                int Bb = ((B - minpix) * (255 / (maxpix - minpix)));
                img.setRGB(x, y, toRGB(Rr, Gg, Bb));
            }
        }

        try {
            saveImg(img);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return;
    }

    public void GreyScale(BufferedImage img) {
        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                int pixel = img.getRGB(x, y);
                int R = getR(pixel);
                int G = getG(pixel);
                int B = getB(pixel);
                int mean = (R + G + B) / 3;
                pixel = toRGB(mean, mean, mean);
                img.setRGB(x, y, pixel);
            }
        }

        try {
            saveImg(img);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return;
    }

    public void dynamicThreshold(BufferedImage img) {
        int t;
        int count = 0;
        BufferedImage img2 = deepCopy(img);
        int[][] arr = new int[10][10];
        for (int x = 100; x < img.getWidth() - 100; x++) {
            for (int y = 100; y < img.getHeight() - 100; y++) {
                for (int i = -100; i < 100; i++) {
                    for (int j = -100; j < 100; j++) {
                        int pixel = img.getRGB(x + i, y + j);
                        count += getR(pixel);
                    }
                }

                int mean = count / 40000;

                count = 0;

                int pixel = img.getRGB(x, y);

                int R = getR(pixel);
                if (R > mean) {
                    img2.setRGB(x, y, toRGB(255, 255, 255));
                } else {
                    img2.setRGB(x, y, toRGB(0, 0, 0));
                }

            }
        }
        try {
            saveImg(img2);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return;
    }

    public void Threshold(BufferedImage img, int tres) {
        int thresho = toRGB(tres, tres, tres);
        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                int pixel = img.getRGB(x, y);
                int pixel2 = img.getRGB(x, y);
                int R = getR(pixel);
                int G = getG(pixel);
                int B = getB(pixel);
                int mean = (R + G + B) / 3;
                pixel = toRGB(mean, mean, mean);
                pixel2 = thresh(pixel, thresho);
                img.setRGB(x, y, pixel2);
            }
        }
        try {
            saveImg(img);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return;
    }

    public void removeNoises(BufferedImage img) {
        int[][] picarray = new int[img.getWidth()][img.getHeight()];
        for (int y = 1; y < img.getHeight() - 1; y++) {
            for (int x = 1; x < img.getWidth() - 1; x++) {
                int pix = img.getRGB(x, y);
                if (getR(pix) >= 200) {
                    picarray[x][y] = 0;
                } else {
                    picarray[x][y] = 1;
                }
            }
        }
        for (int x = 1; x < img.getWidth() - 1; x++) {
            for (int y = 1; y < img.getHeight() - 1; y++) {
                int xx = -1;
                int yy = -1;
                int[][] temparr = new int[3][3];
                for (int t = 0; t < 3; t++) {
                    for (int z = 0; z < 3; z++) {
                        temparr[t][z] = picarray[x + xx][y + yy];
                        yy++;
                    }
                    yy = -1;
                    xx++;
                }
                if (picarray[x][y] == 0
                        && (hasNeighbors(temparr) == 5
                        || hasNeighbors(temparr) == 6
                        || hasNeighbors(temparr) == 7
                        || hasNeighbors(temparr) == 8)) {
                    picarray[x][y] = 1;
                }
            }
        }
        for (int x = 0; x < img.getWidth(); x++) {
            for (int y = 0; y < img.getHeight(); y++) {
                if (picarray[x][y] == 1) {
                    img.setRGB(x, y, toRGB(0, 0, 0));
                } else {
                    img.setRGB(x, y, toRGB(255, 255, 255));
                }
            }
        }

        try {
            saveImg(img);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return;

    }

    private static int filterr(int fx, int fy) {
        int[][] mx = {{128, 1, 2,}, {64, 0, 4,}, {32, 16, 8}};
        return mx[fx][fy];
    }

    private static int filterrr(int fil, int pix, int fx, int fy) {
        int[][] hpf = {{-1, -1, -1,}, {-1, 9, -1,}, {-1, -1, -1}};
        int[][] lpf = {{1, 1, 1,}, {1, 1, 1,}, {1, 1, 1}};
        int[][] gf = {{1, 4, 1,}, {4, 16, 4,}, {1, 4, 1}};
        int[][] gx = {{-1, 0, 0,}, {0, 1, 0,}, {0, 0, 0}};
        int[][] ex = {{-1, -1, 0,}, {-1, 0, 1,}, {0, 1, 1}};
        if (fil == 1) {
            return getR(pix) * hpf[fx][fy];
        } else if (fil == 2) {
            return getR(pix) * lpf[fx][fy];
        } else if (fil == 3) {
            return getR(pix) * gf[fx][fy];
        } else if (fil == 5) {
            return getB(pix) * gx[fx][fy];
        } else if (fil == 6) {
            return getB(pix) * ex[fx][fy];
        } else {
            return 0;
        }

    }

    private static int filterg(int fil, int pix, int fx, int fy) {
        int[][] hpf = {{-1, -1, -1,}, {-1, 9, -1,}, {-1, -1, -1}};
        int[][] lpf = {{1, 1, 1,}, {1, 1, 1,}, {1, 1, 1}};
        int[][] gf = {{1, 4, 1,}, {4, 16, 4,}, {1, 4, 1}};
        int[][] gx = {{-1, 0, 0,}, {0, 1, 0,}, {0, 0, 0}};
        int[][] ex = {{-1, -1, 0,}, {-1, 0, 1,}, {0, 1, 1}};
        
        if (fil == 1) {
            return getG(pix) * hpf[fx][fy];
        } else if (fil == 2) {
            return getG(pix) * lpf[fx][fy];
        } else if (fil == 3) {
            return getG(pix) * gf[fx][fy];
        } else if (fil == 5) {
            return getB(pix) * gx[fx][fy];
        } else if (fil == 6) {
            return getB(pix) * ex[fx][fy];
        } else {
            return 0;
        }
    }

    private static int filterb(int fil, int pix, int fx, int fy) {
        int[][] hpf = {{-1, -1, -1,}, {-1, 9, -1,}, {-1, -1, -1}};
        int[][] lpf = {{1, 1, 1,}, {1, 1, 1,}, {1, 1, 1}};
        int[][] gf = {{1, 4, 1,}, {4, 16, 4,}, {1, 4, 1}};
        int[][] gx = {{-1, 0, 0,}, {0, 1, 0,}, {0, 0, 0}};
        int[][] ex = {{-1, -1, 0,}, {-1, 0, 1,}, {0, 1, 1}};
        if (fil == 1) {
            return getB(pix) * hpf[fx][fy];
        } else if (fil == 2) {
            return getB(pix) * lpf[fx][fy];
        } else if (fil == 3) {
            return getB(pix) * gf[fx][fy];
        } else if (fil == 5) {
            return getB(pix) * gx[fx][fy];
        } else if (fil == 6) {
            return getB(pix) * ex[fx][fy];
        } else {
            return 0;
        }
    }

    public void highPassFilter(BufferedImage img, int fil) {
        BufferedImage img1 = deepCopy(img);
        for (int x = 1; x < img.getWidth() - 1; x++) {
            for (int y = 1; y < img.getHeight() - 1; y++) {
                int[][] tempr = new int[3][3];
                int[][] tempg = new int[3][3];
                int[][] tempb = new int[3][3];
                int R = 0;
                int G = 0;
                int B = 0;
                int Rr = 0;
                int Gg = 0;
                int Bb = 0;
                int yy = -1, xx = -1;
                if (fil == 4) {
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            int temp = img.getRGB(x + xx, y + yy);
                            tempr[t][z] = getR(temp);
                            tempg[t][z] = getG(temp);
                            tempb[t][z] = getB(temp);
                            Rr = Rr + R;
                            Gg = Gg + G;
                            Bb = Bb + B;
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }

                } else if (fil == 1 || fil == 2 || fil == 3 || fil == 5 || fil == 6) {
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            R = filterrr(fil, img.getRGB(x + xx, y + yy), t, z);
                            G = filterg(fil, img.getRGB(x + xx, y + yy), t, z);
                            B = filterb(fil, img.getRGB(x + xx, y + yy), t, z);
                            Rr = Rr + R;
                            Gg = Gg + G;
                            Bb = Bb + B;
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                }
                int newR_x = (tempr[0][2] + 2 * tempr[1][2] + tempr[2][2]) - (tempr[0][0] + 2 * tempr[1][0] + tempr[2][0]);
                int newR_y = (tempr[2][0] + 2 * tempr[2][1] + tempr[2][2]) - (tempr[0][0] + 2 * tempr[0][1] + tempr[0][2]);
                int newR = (int) sqrt((newR_x * newR_x) ^ 2 + (newR_y * newR_y) ^ 2);
                int newG_x = (tempg[0][2] + 2 * tempg[1][2] + tempg[2][2]) - (tempg[0][0] + 2 * tempg[1][0] + tempg[2][0]);
                int newG_y = (tempg[2][0] + 2 * tempg[2][1] + tempg[2][2]) - (tempg[0][0] + 2 * tempg[0][1] + tempg[0][2]);
                int newG = (int) sqrt((newG_x * newG_x) ^ 2 + (newG_y * newG_y) ^ 2);
                int newB_x = (tempb[0][2] + 2 * tempb[1][2] + tempb[2][2]) - (tempb[0][0] + 2 * tempb[1][0] + tempb[2][0]);
                int newB_y = (tempb[2][0] + 2 * tempb[2][1] + tempb[2][2]) - (tempb[0][0] + 2 * tempb[0][1] + tempb[0][2]);
                int newB = (int) sqrt((newB_x * newB_x) ^ 2 + (newB_y * newB_y) ^ 2);
                int lpr = Rr / 9;
                int lpg = Gg / 9;
                int lpb = Bb / 9;
                int gr = Rr / 36;
                int gg = Gg / 36;
                int gb = Bb / 36;
                int epr = 150 - Rr;
                int epg = 150 - Gg;
                int epb = 150 - Bb;
                int pixel = img.getRGB(x, y);
                R = getR(pixel);
                G = getG(pixel);
                B = getB(pixel);
                int fpr = R + Rr;
                int fpg = G + Gg;
                int fpb = B + Bb;
                int fsdd;

                if (fil == 1) {
                    if (Rr >= 255) {
                        Rr = 255;
                    }
                    if (Rr <= 0) {
                        Rr = 0;
                    }
                    if (Gg >= 255) {
                        Gg = 255;
                    }
                    if (Gg <= 0) {
                        Gg = 0;
                    }
                    if (Bb >= 255) {
                        Bb = 255;
                    }
                    if (Bb <= 0) {
                        Bb = 0;
                    }
                    fsdd = toRGB(Rr, Gg, Bb);
                } else if (fil == 2) {
                    if (lpr >= 255) {
                        lpr = 255;
                    }
                    if (lpr <= 0) {
                        lpr = 0;
                    }
                    if (lpg >= 255) {
                        lpg = 255;
                    }
                    if (lpg <= 0) {
                        lpg = 0;
                    }
                    if (lpb >= 255) {
                        lpb = 255;
                    }
                    if (lpb <= 0) {
                        lpb = 0;
                    }
                    fsdd = toRGB(lpr, lpg, lpb);
                } else if (fil == 3) {
                    if (gr >= 255) {
                        gr = 255;
                    }
                    if (gr <= 0) {
                        gr = 0;
                    }
                    if (gg >= 255) {
                        gg = 255;
                    }
                    if (gg <= 0) {
                        gg = 0;
                    }
                    if (gb >= 255) {
                        gb = 255;
                    }
                    if (gb <= 0) {
                        gb = 0;
                    }
                    fsdd = toRGB(gr, gg, gb);
                } else if (fil == 4) {
                    if (newR >= 255) {
                        newR = 255;
                    }
                    if (newR <= 0) {
                        newR = 0;
                    }
                    if (newG >= 255) {
                        newG = 255;
                    }
                    if (newG <= 0) {
                        newG = 0;
                    }
                    if (newB >= 255) {
                        newB = 255;
                    }
                    if (newB <= 0) {
                        newB = 0;
                    }
                    fsdd = toRGB(newR, newG, newB);
                } else if (fil == 5) {
                    if (epr >= 255) {
                        epr = 255;
                    }
                    if (epr <= 0) {
                        epr = 0;
                    }
                    if (epg >= 255) {
                        epg = 255;
                    }
                    if (epg <= 0) {
                        epg = 0;
                    }
                    if (epb >= 255) {
                        epb = 255;
                    }
                    if (epb <= 0) {
                        epb = 0;
                    }
                    fsdd = toRGB(epr, epg, epb);
                } else if (fil == 6) {
                    if (fpr >= 255) {
                        fpr = 255;
                    }
                    if (fpr <= 0) {
                        fpr = 0;
                    }
                    if (fpg >= 255) {
                        fpg = 255;
                    }
                    if (fpg <= 0) {
                        fpg = 0;
                    }
                    if (fpb >= 255) {
                        fpb = 255;
                    }
                    if (fpb <= 0) {
                        fpb = 0;
                    }
                    fsdd = toRGB(fpr, fpg, fpb);
                }else {
                    fsdd = img.getRGB(x, y);
                }
                img1.setRGB(x, y, fsdd);
            }
        }
        try {
            saveImg(img1);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return;
    }

    public int comparePixs(int pix, int x) {
        int[] matk3m = {3, 6, 7, 12, 14, 15, 24, 28, 30, 31,
            48, 56, 60, 62, 63, 96, 112, 120, 124, 126, 127,
            129, 131, 135, 143, 159, 191, 192, 193, 195, 199,
            207, 223, 224, 225, 227, 231, 239, 240, 241, 243,
            247, 248, 249, 251, 252, 253, 254};

        int[] matkmm = {3, 5, 7, 12, 13, 14, 15, 20, 21, 22, 23, 28, 29, 30,
            31, 48, 52, 53, 54, 55, 56, 60, 61, 62, 63, 65, 67,
            69, 71, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89,
            91, 92, 93, 94, 95, 97, 99, 101, 103, 109, 111, 112,
            113, 115, 116, 117, 118, 119, 120, 121, 123, 124,
            125, 126, 127, 131, 133, 135, 141, 143, 149, 151,
            157, 159, 181, 183, 189, 191, 192, 193, 195, 197,
            199, 205, 207, 208, 209, 211, 212, 213, 214, 215,
            216, 217, 219, 220, 221, 222, 223, 224, 225, 227,
            229, 231, 237, 239, 240, 241, 243, 244, 245, 246,
            247, 248, 249, 251, 252, 253, 254, 255};
        if (x == 0) {
            for (int i = 0; i < matkmm.length; i++) {
                if (pix == matkmm[i]) {
                    return 1;
                }
            }
        } else if (x == 1) {
            for (int i = 0; i < matk3m.length; i++) {
                if (pix == matk3m[i]) {
                    return 1;
                }
            }
        }

        return 0;
    }

    BufferedImage deepCopy(BufferedImage bi) {
        ColorModel cm = bi.getColorModel();
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = bi.copyData(null);
        return new BufferedImage(cm, raster, isAlphaPremultiplied, null);
    }

    public static int isCloseBackground(int[][] arr) {
        int counter = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (arr[i][j] == 0
                        && ((i == 0 && j == 1)
                        || (i == 1 && j == 0)
                        || (i == 2 && j == 1)
                        || (i == 1 && j == 2))) {
                    counter++;
                }
            }
        }
        if (counter >= 1) {
            return 1;
        }
        return 0;
    }

    public static int isEdgeBackground(int[][] arr) {
        int counter = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if ((i == 2 || i == 0) && (j == 2 || j == 0) && arr[i][j] == 0) {
                    counter++;
                }
            }
        }
        if (counter >= 1) {
            return 1;
        }
        return 0;
    }

    public static int isContour(int[][] arr) {
        int counter = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (arr[i][j] == 0) {
                    counter++;
                }
            }
        }
        if ((counter == 3 || counter == 4) && isCloseBackground(arr) == 1) {
            return 1;
        }
        return 0;
    }

    public static int hasNeighbors(int[][] arr) {
        int counter = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (arr[i][j] >= 1) {
                    if (i == 1 && j == 1) {
                        counter = counter;
                    } else {
                        counter++;
                    }
                }
            }
        }
        return counter;
    }

    public static int doNotBrake(int[][] arr) {
        int counter = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (arr[i][j] == 0) {
                    counter++;
                }
            }
        }
        if (counter > 7 || counter < 5) {
            return 1;
        }
        return 0;
    }

    public static int has1Neighbors(int[][] arr) {
        int counter = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (arr[i][j] == 1 && (i != 1 && j != 1)) {
                    counter++;
                }
            }
        }
        if (counter <= 2) {
            return 1;
        }
        if (counter >= 3) {
            return 2;
        }
        if (counter >= 1) {
            return 3;
        }
        return 0;
    }

    public static int isFour(int arr) {
        int[] four = {3, 6, 12, 24, 48, 96, 192, 129,
            7, 14, 28, 56, 112, 224, 193, 131,
            15, 30, 60, 120, 240, 225, 195, 135};

        for (int i = 0; i < four.length; i++) {
            if (arr == four[i]) {
                return 1;
            }
        }
        return 0;
    }

    public int keep(int[][] arr, int x, int four) {
        int counter = 0;
        for (int t = 0; t < 3; t++) {
            for (int z = 0; z < 3; z++) {
                if (arr[t][z] >= 1) {
                    counter = counter + filterr(t, z);
                }
            }
        }
        if (comparePixs(counter, x) == 1 && four == 0) {
            return 0;
        }
        if (isFour(counter) == 1 && four == 1) {
            return 4;
        } else {
            return 1;
        }
    }

    public void kmm(BufferedImage img) {
        BufferedImage img1 = deepCopy(img);
        int ctr = 1;
        int i = 0;
        int[][] picarray = new int[img.getWidth()][img.getHeight()];
        for (int y = 1; y < img.getHeight() - 1; y++) {
            for (int x = 1; x < img.getWidth() - 1; x++) {
                int pix = img.getRGB(x, y);
                if (getR(pix) >= 200) {
                    picarray[x][y] = 0;
                } else {
                    picarray[x][y] = 1;
                }
            }
        }
        while (ctr > 0) {
            ctr = 0;
            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[t][z] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 1
                            && isCloseBackground(temparr) == 1) {
                        picarray[x][y] = 2;
                    }
                }
            }
            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[t][z] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 1
                            && isEdgeBackground(temparr) == 1 && isCloseBackground(temparr) == 0) {
                        picarray[x][y] = 3;
                    }
                }
            }
            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[t][z] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if ((picarray[x][y] == 2 || picarray[x][y] == 3)
                            && keep(temparr, 0, 1) == 4) {
                        picarray[x][y] = 4;
                    }
                }
            }
            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[t][z] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 4) {
                        picarray[x][y] = 0;
                        ctr++;
                    }
                }
            }
            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[t][z] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 2
                            && keep(temparr, 0, 0) == 0) {
                        picarray[x][y] = 0;
                        ctr++;
                    } else if (picarray[x][y] == 2) {
                        picarray[x][y] = 1;
                    }
                }
            }
            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[t][z] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }

                    if (picarray[x][y] == 3
                            && keep(temparr, 0, 0) == 0) {
                        picarray[x][y] = 0;
                        ctr++;
                    } else if (picarray[x][y] == 3) {
                        picarray[x][y] = 1;
                    }
                }
            }
            i++;
            System.out.println(i + ". " + ctr);
        }
        for (int y = 1; y < img.getHeight() - 1; y++) {
            for (int x = 1; x < img.getWidth() - 1; x++) {
                int xx = -1;
                int yy = -1;
                int[][] temparr = new int[3][3];
                for (int t = 0; t < 3; t++) {
                    for (int z = 0; z < 3; z++) {
                        temparr[t][z] = picarray[x + xx][y + yy];
                        yy++;
                    }
                    yy = -1;
                    xx++;
                }
                if (picarray[x][y] == 1) {
                    img1.setRGB(x, y, toRGB(0, 0, 0));
                } else {
                    img1.setRGB(x, y, toRGB(255, 255, 255));
                }
            }
        }
        try {
            saveImg(img1);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return;
    }

    public void k3m(BufferedImage img) {
        BufferedImage img1 = deepCopy(img);
        int phase0 = 1;
        int phase1 = 1;
        int phase2 = 1;
        int phase3 = 1;
        int phase4 = 1;
        int i = 0;
        int[][] picarray = new int[img.getWidth()][img.getHeight()];
        for (int y = 1; y < img.getHeight() - 1; y++) {
            for (int x = 1; x < img.getWidth() - 1; x++) {
                int pix = img.getRGB(x, y);
                if (getR(pix) >= 200) {
                    picarray[x][y] = 0;
                } else {
                    picarray[x][y] = 1;
                }
            }
        }
        while (phase0 == 1 || phase1 == 1 || phase2 == 1 || phase3 == 1 || phase4 == 1) {
            i++;
            int ctr0 = 0;
            int ctr1 = 0;
            int ctr2 = 0;
            int ctr3 = 0;
            int ctr4 = 0;
            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[t][z] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 1
                            && (isCloseBackground(temparr) == 1 || isEdgeBackground(temparr) == 1)) {
                        picarray[x][y] = 2;
                    }

                }
            }
            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[z][t] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 2
                            && hasNeighbors(temparr) == 3
                            && keep(temparr, 1, 0) == 0) {
                        picarray[x][y] = 0;
                        ctr0++;
                    }
                }
            }
            if (ctr0 == 0) {
                phase0 = 0;
            } else {
                phase0 = 1;
            }

            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[z][t] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 2
                            && (hasNeighbors(temparr) == 3
                            || hasNeighbors(temparr) == 4)
                            && keep(temparr, 1, 0) == 0) {
                        picarray[x][y] = 0;
                        ctr1++;
                    }
                }
            }
            if (ctr1 == 0) {
                phase1 = 0;
            } else {
                phase1 = 1;
            }

            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[z][t] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 2
                            && (hasNeighbors(temparr) == 3
                            || hasNeighbors(temparr) == 4
                            || hasNeighbors(temparr) == 5)
                            && keep(temparr, 1, 0) == 0) {
                        picarray[x][y] = 0;
                        ctr2++;
                    }
                }
            }
            if (ctr2 == 0) {
                phase2 = 0;
            } else {
                phase2 = 1;
            }

            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[z][t] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 2
                            && (hasNeighbors(temparr) == 3
                            || hasNeighbors(temparr) == 4
                            || hasNeighbors(temparr) == 5
                            || hasNeighbors(temparr) == 6)
                            && keep(temparr, 1, 0) == 0) {
                        picarray[x][y] = 0;
                        ctr3++;
                    }
                }
            }
            if (ctr3 == 0) {
                phase3 = 0;
            } else {
                phase3 = 1;
            }

            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[z][t] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 2
                            && (hasNeighbors(temparr) == 3
                            || hasNeighbors(temparr) == 4
                            || hasNeighbors(temparr) == 5
                            || hasNeighbors(temparr) == 6
                            || hasNeighbors(temparr) == 7)
                            && keep(temparr, 1, 0) == 0) {
                        picarray[x][y] = 0;
                        ctr4++;
                    }
                }
            }
            if (ctr4 == 0) {
                phase4 = 0;
            } else {
                phase4 = 1;
            }

            for (int y = 1; y < img.getHeight() - 1; y++) {
                for (int x = 1; x < img.getWidth() - 1; x++) {
                    int xx = -1;
                    int yy = -1;
                    int[][] temparr = new int[3][3];
                    for (int t = 0; t < 3; t++) {
                        for (int z = 0; z < 3; z++) {
                            temparr[z][t] = picarray[x + xx][y + yy];
                            yy++;
                        }
                        yy = -1;
                        xx++;
                    }
                    if (picarray[x][y] == 2) {
                        picarray[x][y] = 1;
                    }
                }
            }
            System.out.println(i + ". " + phase0 + " " + phase1 + " " + phase2 + " " + phase3 + " " + phase4);
            if (phase0 == 1 || phase1 == 1 || phase2 == 1 || phase3 == 1 || phase4 == 1) {
                phase0 = 1;
                phase1 = 1;
                phase2 = 1;
                phase3 = 1;
                phase4 = 1;
            }
        }
        for (int y = 1; y < img.getHeight() - 1; y++) {
            for (int x = 1; x < img.getWidth() - 1; x++) {
                if (picarray[x][y] >= 1) {
                    img1.setRGB(x, y, toRGB(0, 0, 0));
                } else {
                    img1.setRGB(x, y, toRGB(255, 255, 255));
                }
            }
        }

        try {
            saveImg(img1);
        } catch (IOException ex) {
            Logger.getLogger(Bio_Graphics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return;
    }

    class graph extends JPanel implements MouseListener {

        private static final int MAX_SCORE = 256;
        private static final int PREF_W = 512;
        private static final int PREF_H = 512;
        private static final int BORDER_GAP = 0;
        private final Color GRAPH_COLOR = Color.green;
        private final Color GRAPH_POINT_COLOR = new Color(150, 50, 50, 180);
        private final Stroke GRAPH_STROKE = new BasicStroke(3f);
        private static final int GRAPH_POINT_WIDTH = 5;
        private static final int Y_HATCH_CNT = 256;
        private List<Point> scores;
        List<Point> graphPoints = new ArrayList<Point>();
        int xstart = 0;
        int ystart = 0;
        Point currpoint = new Point();
        Point max = new Point(0,512);
        public graph(List<Point> scores) {
            this.scores = scores;
            addMouseListener(this);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;

            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            double xScale = ((double) getWidth() - 2 * BORDER_GAP) / (scores.size() - 1);
            double yScale = ((double) getHeight() - 2 * BORDER_GAP) / (MAX_SCORE - 1);
            //graphPoints.add(new Point(0,512));
            
            
            // create x and y axes 
            g2.drawLine(BORDER_GAP, getHeight() - BORDER_GAP, BORDER_GAP, BORDER_GAP);
            g2.drawLine(BORDER_GAP, getHeight() - BORDER_GAP, getWidth() - BORDER_GAP, getHeight() - BORDER_GAP);

            // create hatch marks for y axis. 
            for (int i = 0; i < Y_HATCH_CNT; i++) {
                int x0 = BORDER_GAP;
                int x1 = GRAPH_POINT_WIDTH + BORDER_GAP;
                int y0 = getHeight() - (((i + 1) * (getHeight() - BORDER_GAP * 2)) / Y_HATCH_CNT + BORDER_GAP);
                int y1 = y0;
                g2.drawLine(x0, y0, x1, y1);
            }

            // and for x axis
            for (int i = 0; i < scores.size() - 1; i++) {
                int x0 = (i + 1) * (getWidth() - BORDER_GAP * 2) / (scores.size() - 1) + BORDER_GAP;
                int x1 = x0;
                int y0 = getHeight() - BORDER_GAP;
                int y1 = y0 - GRAPH_POINT_WIDTH;
                g2.drawLine(x0, y0, x1, y1);
            }
            graphPoints.clear();
            Stroke oldStroke = g2.getStroke();
            g2.setColor(GRAPH_COLOR);
            g2.setStroke(GRAPH_STROKE);
            //if (graphPoints.size()<2){
            int min = minpoint(currpoint);
            graphPoints.add(new Point(0,512));
            //}
            for (int i = 0; i < scores.size(); i++) {
                graphPoints.add(scores.get(i));
                //System.out.println(graphPoints.get(i).getX());
                //
                
                    
            }
            //graphPoints.remove(graphPoints.size()-1);
            //if (graphPoints.size()<2){
            graphPoints.add(new Point(512,0));
            //}
            Collections.sort(graphPoints,new Comparator<Point>() {
            public int compare(Point o1, Point o2) {
                return Integer.compare((int)o1.getX(), (int)o2.getX());
            }
            });
            cores = graphPoints;
            for (int i = 0; i < graphPoints.size()-1; i++) {
                
                int x1 = graphPoints.get(i).x;
                int y1 = graphPoints.get(i).y;
                int x2 = graphPoints.get(i+1).x;
                int y2 = graphPoints.get(i+1).y;
                g2.drawLine(x1, y1, x2, y2);
            }

            g2.setStroke(oldStroke);
            g2.setColor(GRAPH_POINT_COLOR);
            for (int i = 0; i < graphPoints.size(); i++) {
                int x = graphPoints.get(i).x - GRAPH_POINT_WIDTH / 2;
                int y = graphPoints.get(i).y - GRAPH_POINT_WIDTH / 2;;
                int ovalW = GRAPH_POINT_WIDTH;
                int ovalH = GRAPH_POINT_WIDTH;
                g2.fillOval(x, y, ovalW, ovalH);
            }
        }
        private int minpoint(Point p){
            Point max = new Point (0,0);
            int ix = 0;
            for (int i = 0; i < graphPoints.size(); i++){
                if (max.getX() < p.getX() && max.getX() < graphPoints.get(i).getX()){
                    max = graphPoints.get(i);
                    ix = i;
                }
            }
            return ix;
        }
        private Point maxpoint(Point p){
            Point max = new Point (512,512);
            for (int i = graphPoints.size(); i >0; i--){
                if (max.getX() > p.getX() && max.getX() > graphPoints.get(i).getX()){
                    max = graphPoints.get(i);
                }
            }
            return max;
        }
        @Override
        public Dimension getPreferredSize() {
            return new Dimension(PREF_W, PREF_H);
        }

        private void createAndShowGui() {
            List<Point> scores = new ArrayList<>();
            Random random = new Random();
            //double ngamma = 1/gm;
            int maxDataPoints = 256;
            int maxScore = 255;
            for (int i = 0; i < maxDataPoints; i++) {
                scores.add(new Point(i, i));
                //scores.add((int) (255 * (Math.pow((double) (i+1) / (double) 255, ngamma))));
            }
            graph mainPanel = new graph(scores);

            JFrame frame = new JFrame("graph");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            jPanel1.add(mainPanel);

        }

        public void main(String[] args) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    createAndShowGui();
                }
            });
        }

        @Override
        public void mousePressed(MouseEvent e) {//System.out.println(e.getY()/2-13);
            xstart = e.getY() / 2;
            if (e.getX() >= 268) {
                ystart = (e.getX() / 2 ) + 13 * (e.getX() / 512);
            }
            if (e.getX() < 242) {
                ystart = (e.getX() / 2 ) - 13 * (e.getX() / 512);
            }
            if (e.getX() >= 242 && e.getX() < 268) {
                ystart = (e.getX() / 2);
            }
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            boolean flag = false;
            System.out.println(ystart);///2-13);
            //scores.remove(ystart);
            //scores.add(ystart, 255 - (e.getY() / 2));
            //graphPoints.clear();
            //if (graphPoints.size() > 2)
            //graphPoints.add(graphPoints.get(graphPoints.size()-1));
                //graphPoints.add(new Point(512,0));
            //graphPoints.add(e.getPoint());
            for (int i = 0; i<scores.size(); i++){
            if (scores.get(i).getX() == e.getPoint().getX()){
                scores.remove(i);
            scores.add(new Point(e.getX(),e.getY()));
            flag = true;
            }
            }
            if (flag == false){
                scores.add(new Point(e.getX(),e.getY()));
            }
            currpoint = e.getPoint();
            SwingUtilities.updateComponentTreeUI(jPanel1);
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

        /**
         * Called whenever the mouse clicks. Could be replaced with setting the
         * value of a JLabel, etc.
         */
        @Override
        public void mouseClicked(MouseEvent e) {

        }
    }
}
